import os
import logging
import pandas as pd
import streamlit as st

from views import visualizacao_estatistica
from views import ml_teste  # importa o pipeline completo com PCA + DBSCAN

st.set_page_config(page_title="Dashboard An√°lise de Intera√ß√µes", layout="wide")

# Configura√ß√£o do logger
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# ----------- INTERFACE PRINCIPAL ------------------

st.title("üß† An√°lise de Intera√ß√µes - Reabilita√ß√£o Motora")

# -------- Navega√ß√£o por abas --------
abas = st.tabs(["üè† In√≠cio", "üìä Visualiza√ß√£o Estat√≠stica", "ü§ñ Modelo Preditivo", "üöß Outra P√°gina"])

# -------- P√°gina 1: Instru√ß√µes --------
with abas[0]:
    st.title("‚ú®Reabilita√ß√£o assistida por AR: visualiza√ß√£o e an√°lise dos dados")
    st.markdown("""
    Este dashboard tem como objetivo auxiliar na an√°lise de dados obtidos a partir de intera√ß√µes com softwares de reabilita√ß√£o.
                
    ### üìÅ Upload de Arquivo
    - O arquivo deve estar no formato **.CSV**.
    - Fa√ßa o envio utilizando a barra lateral √† esquerda.
                
    ### ‚öôÔ∏è Par√¢metros
    - **Fonte dos dados**: Tipo de c√¢mera utilizada (Infravermelho ou RGB).

    ### üìä Visualiza√ß√£o Estat√≠stica
    - P√°gina destinada a apresentar an√°lises explorat√≥rias iniciais dos dados enviados.

    ### ü§ñ Modelo Preditivo
    - P√°gina dedicada √† apresenta√ß√£o de resultados gerados pelo modelo de aprendizado de m√°quina n√£o supervisionado.
    """)

# -------- P√°gina 2: Visualiza√ß√£o Estat√≠stica --------
with abas[1]:
    visualizacao_estatistica.carregar()

# -------- P√°gina 3: Resultados do Modelo Preditivo --------
with abas[2]:
    st.title("ü§ñ Resultados do Modelo de Aprendizado de M√°quina")

    st.markdown("""
    ### üß† An√°lise de Padr√µes de Movimento Corporal

    Esta se√ß√£o apresenta uma an√°lise autom√°tica dos dados de movimento do paciente, com base em um modelo de aprendizado de m√°quina. 
    O objetivo √© **identificar grupos (clusters) com padr√µes semelhantes de movimento** em diferentes partes do corpo, permitindo a 
    detec√ß√£o de poss√≠veis **compensa√ß√µes, assimetrias ou desvios**.

    #### üìå O que voc√™ est√° vendo:

    - **Gr√°fico de Dispers√£o**:  
    Mostra as execu√ß√µes do paciente agrupadas em cores diferentes, com base na semelhan√ßa geral dos movimentos.  
    Cada ponto representa um conjunto de dados, e os grupos (clusters) podem indicar padr√µes de movimento distintos.

    - **Gr√°fico de Barras**:  
    Apresenta a **m√©dia de movimento** por parte do corpo dentro de cada grupo identificado.  
    Isso permite comparar, por exemplo, se um grupo utiliza mais o cotovelo direito do que o esquerdo, sugerindo compensa√ß√£o do movimento.

    - **Tabela de M√©dias por Grupo**:  
    Resume os valores m√©dios de movimento (√¢ngulos) de cada articula√ß√£o para cada grupo.  
    Essa tabela ajuda a entender o comportamento t√≠pico de cada cluster e facilita a identifica√ß√£o de desequil√≠brios.

    - **Interpreta√ß√£o Autom√°tica**:  
    A interpreta√ß√£o √© a parte mais essencial nesse momento, principalmente por parte do profissional da sa√∫de, para auxilia-lo, um texto resumido
    com os principais padr√µes identificados nos grupos, facilitando a an√°lise cl√≠nica sem necessidade de conhecimento t√©cnico em modelos de
    intelig√™ncia artificial.
                
    - **Pontos Fora do Padr√£o (Cluster -1)**:  
    Quando o modelo detecta movimentos muito diferentes dos demais, eles aparecem neste grupo especial.  
    Esses pontos podem indicar **compensa√ß√µes ou execu√ß√µes at√≠picas** e merecem aten√ß√£o especial.
    """)

    uploaded_file = st.sidebar.file_uploader("üìÅ Envie o arquivo CSV do paciente", type="csv")
    pasta_treinamento = "treino"  # ajuste se necess√°rio

    if st.sidebar.button("üîç Analisar"):
        if uploaded_file is None:
            st.info("Envie um arquivo CSV para an√°lise.")
        else:
            # Chamada da fun√ß√£o principal do ml_teste.py
            (fig_pca, fig_barras), clusters, interpretacao, tabela, pontos_outliers = ml_teste.processar_e_plotar(uploaded_file, pasta_treinamento)

            if fig_pca and fig_barras:
                st.subheader("Gr√°fico de Dispers√£o com PCA")
                st.plotly_chart(fig_pca, use_container_width=True)

                st.subheader("Gr√°fico de M√©dias por Cluster")
                st.plotly_chart(fig_barras, use_container_width=True)

                st.markdown("### üìÑ Informa√ß√µes M√©dias por Cluster")
                colunas_numericas = tabela.select_dtypes(include=['float', 'int']).columns
                st.dataframe(tabela.style.format({col: "{:.2f}" for col in colunas_numericas}))

                st.markdown(f"### üßæ Interpreta√ß√£o")
                st.success(interpretacao)

                # Exibir outliers se houver
                if pontos_outliers is not None and not pontos_outliers.empty:
                    st.markdown("### ‚ö†Ô∏è Movimentos Fora do Padr√£o (Cluster -1)")
                    st.warning("Os movimentos abaixo foram classificados como **compensa√ß√µes ou execu√ß√µes at√≠picas**.")
                    st.dataframe(pontos_outliers)

            else:
                st.warning(interpretacao)


# -------- P√°gina 4: Em constru√ß√£o --------
with abas[3]:
    st.title("üöß P√°gina em Constru√ß√£o")
    st.info("Esta funcionalidade est√° em desenvolvimento. Volte em breve!")
